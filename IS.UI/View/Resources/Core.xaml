<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:fa="http://schemas.fontawesome.io/icons/"
                    xmlns:Controls="clr-namespace:IS.UI.Control"
                    xmlns:Converters="clr-namespace:IS.UI.Converters"
                    
                    xmlns:local="clr-namespace:IS.UI">

    <!--Danila styles-->
    <Style x:Key="20HTextBoxStyle" TargetType="TextBox">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="110"/>
    </Style>
    <Style x:Key="ButtonStyle" TargetType="Button">
        <Setter Property="MaxHeight" Value="20"/>
        <Setter Property="MaxWidth" Value="50"/>
    </Style>
    <Style x:Key="ComboStyle" TargetType="ComboBox">
        <Setter Property="MaxHeight" Value="20"/>
        <Setter Property="MaxWidth" Value="100"/>
    </Style>

    
    
    <!--Aleksandr Styles XD-->
    <Style x:Key="InputDockingPanelStyle" TargetType="{x:Type DockPanel}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Height" Value="35"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Width, RelativeSource={RelativeSource Self},
                Converter={Converters:IsValueLessThanParameter},ConverterParameter=450}"
                         Value="True">
                <Setter Property="Height" Value="55"/>
            </DataTrigger>
        </Style.Triggers>
        <Style.Resources>
            <Style TargetType="{x:Type TextBox}">
                <Setter Property="BorderBrush" Value="Gray"/>
                <Setter Property="Height" Value="25"/>
                <Setter Property="FontSize" Value="16"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=Width, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DockPanel},
                Converter={Converters:IsValueLessThanParameter},ConverterParameter=450}"
                         Value="True">
                        <Setter Property="HorizontalAlignment" Value="Stretch"/>
                        <Setter Property="Margin" Value="0,0,0,0"/>
                        <Setter Property="DockPanel.Dock" Value="Bottom"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=Width, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DockPanel},
                Converter={Converters:IsValueLessThanParameter},ConverterParameter=450}"
                         Value="False">
                        <Setter Property="HorizontalAlignment" Value="Stretch"/>
                        <Setter Property="DockPanel.Dock" Value="Left"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="FontWeight" Value="DemiBold"/>
                <Setter Property="FontSize" Value="18"/>
                <Setter Property="Width" Value="90"/>
                <Setter Property="DockPanel.Dock" Value="Left"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=Width, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DockPanel},
                Converter={Converters:IsValueLessThanParameter},ConverterParameter=450}"
                         Value="True">
                        <Setter Property="TextAlignment" Value="Center"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                        <Setter Property="Margin" Value="0,0,0,0"/>
                        <Setter Property="DockPanel.Dock" Value="Top"/>

                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

    
    
    
    <Style TargetType="{x:Type Controls:IconButton}" x:Key="IconButtonStyle">
        <Setter Property="Height" Value="30"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border x:Name="border" BorderBrush="DarkGray"
                            BorderThickness="1" CornerRadius="0"
                            HorizontalAlignment="Stretch" 
                            VerticalAlignment="Stretch">
                        <Grid HorizontalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="35"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <fa:ImageAwesome Margin="10,0,0,0" Icon="{Binding Path=Icon,RelativeSource={RelativeSource AncestorType={x:Type Controls:IconButton},Mode=FindAncestor}}" Height="17">
                                <fa:ImageAwesome.Foreground>
                                    <SolidColorBrush Color="Black" x:Name="IconForeGroundColor"/>
                                </fa:ImageAwesome.Foreground>
                            </fa:ImageAwesome>
                            <TextBlock Grid.Column="1" 
                                Width="{Binding Path=Width,RelativeSource={RelativeSource AncestorType={x:Type Controls:IconButton},Mode=FindAncestor}}"
                                Text="{Binding Path=Text,RelativeSource={RelativeSource AncestorType={x:Type Controls:IconButton},Mode=FindAncestor}}"
                                VerticalAlignment="Center" HorizontalAlignment="Stretch"
                                Margin="10,0,8,0" FontSize="16" />
                        </Grid>
                        <Border.Background>
                            <SolidColorBrush Color="AliceBlue" x:Name="SolidBackground"/>
                        </Border.Background>
                        <Border.Triggers>
                            <EventTrigger RoutedEvent="MouseEnter">
                                <BeginStoryboard Storyboard="{DynamicResource MouseOverBorderStoryEnter}"/>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="MouseLeave">
                                <BeginStoryboard Storyboard="{DynamicResource MouseOverBorderStoryExit}"/>
                            </EventTrigger>
                        </Border.Triggers>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Controls:IconButton}" BasedOn="{StaticResource IconButtonStyle}">

    </Style>

    <Style x:Key="NumericTextBox" TargetType="{x:Type Controls:NumericBox}">
        <Setter Property="Height" Value="25"/>
    </Style>
    
    <Style x:Key="UniformInputFormStyle" TargetType="{x:Type UniformGrid}">
        <Setter Property="Columns" Value="1"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Rows" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=ActualWidth, RelativeSource={RelativeSource Self},
                Converter={Converters:IsValueLessThanParameter},ConverterParameter=450}"
                         Value="True">
                <Setter Property="Rows" Value="1"/>
                <Setter Property="Columns" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>

            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="InputStackPanelStyle" TargetType="{x:Type StackPanel}">
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Height" Value="25"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Width, RelativeSource={RelativeSource Self},
                Converter={Converters:IsValueLessThanParameter},ConverterParameter=450}"
                         Value="True">
                <Setter Property="Orientation" Value="Vertical"/>
                <Setter Property="Height" Value="55"/>
            </DataTrigger>
        </Style.Triggers>
        <Style.Resources>
            <Style TargetType="{x:Type TextBox}">
                <Setter Property="BorderBrush" Value="Gray"/>
                <Setter Property="Height" Value="20"/>
                
                <Setter Property="BorderThickness" Value="2"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=Width, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=StackPanel},
                Converter={Converters:IsValueLessThanParameter},ConverterParameter=450}"
                         Value="True">
                        <Setter Property="Width" Value="75"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>

                        <Setter Property="Margin" Value="0,0,0,0"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=Width, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=StackPanel},
                Converter={Converters:IsValueLessThanParameter},ConverterParameter=450}"
                         Value="False">
                        <Setter Property="HorizontalAlignment" Value="Right"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            
            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="FontWeight" Value="DemiBold"/>
                <Setter Property="FontSize" Value="18"/>
                <Setter Property="Width" Value="90"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=Width, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=StackPanel},
                Converter={Converters:IsValueLessThanParameter},ConverterParameter=450}"
                         Value="True">
                        <Setter Property="TextAlignment" Value="Left"/>
                        <Setter Property="Width" Value="75"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                        <Setter Property="Margin" Value="0,0,0,0"/>

                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>
    
    <Style x:Key="DefaultLabelTextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>
    
    <Style x:Key="DefaultInputTextBoxStyle" TargetType="TextBox">
        
    </Style>

    <Storyboard x:Key="MouseOverBorderStoryEnter">
        <ThicknessAnimation Duration="0:0:0.400" To="3" Storyboard.TargetProperty="BorderThickness" />
        <ColorAnimation 
                Storyboard.TargetName="SolidBackground"
                Storyboard.TargetProperty="Color"
                From="AliceBlue" To="Gray" Duration="0:0:1" />
        <ColorAnimation 
                Storyboard.TargetName="IconForeGroundColor"
                Storyboard.TargetProperty="Color"
                From="Black" To="LightBlue" Duration="0:0:0.400" />
    </Storyboard>

    <Storyboard x:Key="MouseOverBorderStoryExit">
        <ThicknessAnimation 
                Duration="0:0:0.250" 
                To="0" 
                Storyboard.TargetProperty="BorderThickness" />
        <ColorAnimation 
                Storyboard.TargetName="SolidBackground"
                Storyboard.TargetProperty="Color"
                From="Gray" To="AliceBlue" Duration="0:0:1" />
        <ColorAnimation 
                Storyboard.TargetName="IconForeGroundColor"
                Storyboard.TargetProperty="Color"
                From="LightBlue" To="Black" Duration="0:0:0.400" />
    </Storyboard>

   
</ResourceDictionary>